package com.comicboys.project.io.conjugation;

import com.comicboys.project.client.APIClient;
import com.comicboys.project.data.Mappings;
import com.comicboys.project.io.config.ConfigurationFile;
import com.comicboys.project.io.translate.XMLTranslator;
import com.comicboys.project.utility.XMLFileManager;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

public class ConjugationGenerator {
    private final XMLTranslator xmlTranslator;
    private final String inputPath;
    private final String fileName;
    private final ConfigurationFile config;

    public ConjugationGenerator() {
        this.config = new ConfigurationFile();
        APIClient client = new APIClient(config);
        Mappings mappings = new Mappings();
        String lessonType = "conjugation";
        this.inputPath = "assets/conjugations/";
        this.fileName = "specification.xml";
        this.xmlTranslator = new XMLTranslator(config, client, mappings, lessonType, inputPath);
    }

    public void generateConjugationLesson() {
        // First translate the XML
        boolean translationSuccess = xmlTranslator.translateXML(fileName);

        if (translationSuccess) {
            // Get the automatically generated translated filename
            String sourceLang = config.getProperty("SOURCE_LANGUAGE").toLowerCase();
            String targetLang = config.getProperty("TARGET_LANGUAGE").toLowerCase();
            String autoGeneratedFile = inputPath + sourceLang + "-to-" + targetLang + "-conjugation.xml";

            removeFirstPanelFromEachScene(autoGeneratedFile);

            System.out.println("Conjugation lesson generated at: " + autoGeneratedFile);
        } else {
            System.out.println("Failed to generate conjugation lesson");
        }
    }

    private void removeFirstPanelFromEachScene(String filePath) {
        try {
            Document doc = XMLFileManager.loadXMLFromFile(filePath);
            NodeList scenes = doc.getElementsByTagName("scene");

            for (int i = 0; i < scenes.getLength(); i++) {
                Element scene = (Element) scenes.item(i);
                NodeList panels = scene.getElementsByTagName("panel");

                if (panels.getLength() > 0) {
                    Node firstPanel = panels.item(0);
                    scene.removeChild(firstPanel);
                }
            }

            // Save the modified file back
            XMLFileManager.saveXMLToFile(doc, filePath);
            System.out.println("First panel of each scene removed in: " + filePath);

        } catch (Exception e) {
            System.out.println("Failed to remove first panel from scenes");
            e.printStackTrace();
        }
    }


    public static void main(String[] args) {
        ConjugationGenerator generator = new ConjugationGenerator();
        generator.generateConjugationLesson();
    }
}